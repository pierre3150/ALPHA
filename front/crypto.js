// crypto.js - Module de chiffrement RSA
class CryptoManager {
    constructor() {
        this.crypt = new JSEncrypt();
        this.privateKey = null;
        this.publicKey = null;
    }

    // G√©n√©rer une paire de cl√©s RSA
    generateKeyPair() {
        console.log('üîë G√©n√©ration des cl√©s RSA...');
        
        // G√©n√©rer les cl√©s avec JSEncrypt
        this.crypt.generate(2048, "65537");
        
        // R√©cup√©rer les cl√©s
        this.privateKey = this.crypt.getPrivateKey();
        this.publicKey = this.crypt.getPublicKey();
        
        // Stocker la cl√© priv√©e localement (s√©curis√© c√¥t√© client)
        localStorage.setItem('privateKey', this.privateKey);
        
        console.log('‚úÖ Cl√©s RSA g√©n√©r√©es');
        return {
            privateKey: this.privateKey,
            publicKey: this.publicKey
        };
    }

    // Charger les cl√©s depuis le localStorage
    loadKeys() {
        this.privateKey = localStorage.getItem('privateKey');
        if (this.privateKey) {
            this.crypt.setPrivateKey(this.privateKey);
            // Extraire la cl√© publique de la cl√© priv√©e
            this.publicKey = this.crypt.getPublicKey();
            return true;
        }
        return false;
    }

    // Envoyer la cl√© publique au serveur
    async uploadPublicKey(authToken) {
        if (!this.publicKey) {
            throw new Error('Aucune cl√© publique disponible');
        }

        try {
            const response = await fetch('http://10.60.12.114:3000/auth/save-public-key', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    public_key: this.publicKey
                })
            });

            if (!response.ok) {
                throw new Error('Erreur lors de l\'envoi de la cl√© publique');
            }

            console.log('‚úÖ Cl√© publique envoy√©e au serveur');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur envoi cl√© publique:', error);
            throw error;
        }
    }

    // R√©cup√©rer la cl√© publique d'un utilisateur
    async getUserPublicKey(userId, authToken) {
        try {
            const response = await fetch(`http://10.60.12.114:3000/users/${userId}/public-key`, {
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            });

            if (!response.ok) {
                throw new Error('Cl√© publique introuvable');
            }

            const data = await response.json();
            return data.publicKey;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration cl√© publique:', error);
            throw error;
        }
    }

    // Chiffrer un message avec la cl√© publique du destinataire
    encryptMessage(message, recipientPublicKey) {
        const encrypt = new JSEncrypt();
        encrypt.setPublicKey(recipientPublicKey);
        
        const encrypted = encrypt.encrypt(message);
        if (!encrypted) {
            throw new Error('Erreur lors du chiffrement');
        }
        
        return encrypted;
    }

    // D√©chiffrer un message avec notre cl√© priv√©e
    decryptMessage(encryptedMessage) {
        if (!this.privateKey) {
            throw new Error('Cl√© priv√©e non disponible');
        }

        this.crypt.setPrivateKey(this.privateKey);
        const decrypted = this.crypt.decrypt(encryptedMessage);
        
        if (!decrypted) {
            throw new Error('Erreur lors du d√©chiffrement');
        }
        
        return decrypted;
    }

    // V√©rifier si l'utilisateur a des cl√©s
    hasKeys() {
        return this.privateKey !== null && this.publicKey !== null;
    }

    // Initialiser le gestionnaire de crypto
    async initialize(authToken) {
        // Essayer de charger les cl√©s existantes
        if (this.loadKeys()) {
            console.log('üîë Cl√©s RSA charg√©es depuis le stockage local');
            return true;
        }

        // Sinon, g√©n√©rer de nouvelles cl√©s
        console.log('üîë G√©n√©ration de nouvelles cl√©s RSA...');
        this.generateKeyPair();
        
        // Envoyer la cl√© publique au serveur
        try {
            await this.uploadPublicKey(authToken);
            return true;
        } catch (error) {
            console.error('‚ùå Erreur initialisation crypto:', error);
            return false;
        }
    }
}

// Export pour utilisation dans d'autres scripts
window.CryptoManager = CryptoManager;